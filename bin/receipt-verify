#!/usr/bin/env node
import { readFileSync, existsSync } from "fs";
import { validateSchema, verifyHashes, computeTrustScore } from "../src/index.js";

const USAGE = `Usage:
  receipt-verify verify <receipt.json> --schema <schema.json> [--input <file>] [--output <file>]`;

async function main(){
  const args = process.argv.slice(2);
  if (args[0] !== "verify") { console.error(USAGE); process.exit(2); }

  const receiptPath = args[1];
  const sIdx = args.indexOf("--schema");
  if (!receiptPath || sIdx === -1) { console.error(USAGE); process.exit(2); }
  const schemaPath = args[sIdx+1];

  const iIdx = args.indexOf("--input");
  const oIdx = args.indexOf("--output");

  const receipt = JSON.parse(readFileSync(receiptPath, "utf8"));
  const schemaRes = validateSchema(receipt, schemaPath);

  let hashesRes = { ok:false, input:false, output:false };
  if (iIdx !== -1 && oIdx !== -1) {
    const inPath = args[iIdx+1], outPath = args[oIdx+1];
    if (existsSync(inPath) && existsSync(outPath)) {
      hashesRes = verifyHashes({
        input: readFileSync(inPath),
        output: readFileSync(outPath),
        receipt
      });
    }
  }

  const score = computeTrustScore({
    schema: schemaRes.ok,
    hashes: hashesRes.ok,
    signature: false,
    anchor: false
  });

  const result = {
    pass: schemaRes.ok && hashesRes.ok,
    schema_ok: schemaRes.ok,
    schema_errors: schemaRes.errors,
    hashes_ok: hashesRes.ok,
    details: { hashes: hashesRes },
    trust_score: score
  };

  console.log(JSON.stringify(result, null, 2));
  process.exit(result.pass ? 0 : 1);
}

main().catch(e=>{ console.error(e); process.exit(2); });
